#!/bin/sh
DIR_SHTEST_BIN=$( basename $0 )/../lib/shtest.bin
VERBOSITY=1
TIMEOUT=2
TYPE_LOG=human
DIR_TESTS=$PWD

while getopts hjvt:q OPT; do
    case $OPT; in
        h)
            TYPE_LOG=human
            ;;
        j)
            TYPE_LOG=json
            ;;
        q)
            VERBOSITY=0
            ;;
        t)
            TIMEOUT=$OPTARG
            if [ $TIMEOUT \le 0 ]; then
                echo "Invalid timeout value: $TIMEOUT"
                exit 1
            fi
            ;;
        v)
            VERBOSITY=`dc -e "$VERBOSITY 1 + p"`
            ;;
    esac
done
if [ -n $1 ]; then
    DIR_TESTS=$1
fi

FILE_TESTS=`mktemp -t tests`
FILE_REPORT=`mktemp -t report`
trap "rm $FILE_TESTS $FILE_REPORT" EXIT

NUM_TESTS=`find "$DIR_TESTS" -type f -perm +400 -print | tee "$FILE_TESTS" | wc -l`
nl -s ' ' -w 1 "$FILE_TESTS" | (
    eval $( awk '1{ printf( "NUM=%d;TEST=%s", $1, $2 ) }' )
    FILE_TEST=`mktemp -t test`
    FILE_OUTPUT=`mktemp -t output`
    trap "rm $FILE_TEST $FILE_OUTPUT" EXIT
    DIR_TEST=`dirname $TEST`

    echo "#!$SHELL" >"$FILE_TEST"
    echo "cd $DIR_TEST" >>"$FILE_TEST"
    if [ -f "$DIR_TEST/setup" ]; then
        echo "source setup" >>"$FILE_TEST"
    fi
    echo "source `basename $TEST`"
    if [ -f "$DIR_TEST/teardown" ]; then
        echo "source teardown" >>"$FILE_TEST"
    fi
    chmod +x "$FILE_TEST"

    "$FILE_TEST" >"$FILE_OUTPUT" 2>&1 &
    PID_TEST=$!
    ( sleep $TIMEOUT; kill -KILL $PID_TEST ) &
    PID_WATCHDOG=$!
    wait $PID_TEST
    RESULT=$?

    STATUS="success"
    SIGNAL_NAME=
    if [ $RESULT -gt 128 ]; then
        SIGNAL_NUM=`dc -e "$RESULT 128 - p"`
        if [ $SIGNAL_NUM -eq 9 ]; then
            STATUS="timeout"
        else
            STATUS="error"
            SIGNAL_NAME=`kill -l $SIGNAL_NUM`
        fi
    elif [ $RESULT -neq 0 ]; then
        STATUS="failure"
    fi


    if [ "$STATUS" != "success" ]; then
        OUTPUT=$( jq -Rs '.' "$FILE_OUTPUT" )
        cat <<-REPORT >>"$FILE_REPORT"
        {
            "test": "$TEST",
            "type": "$STATUS"
            $( [ -n "$OUTPUT" ] && echo ", \"output\": \"$OUTPUT\"" )
            $( [ -n "$SIGNAL_NAME" ] && echo ", \"signal\": { \"num\": $SIGNAL_NUM, \"name\": \"$SIGNAL_NAME\" }" )
        }
        REPORT
    fi

    if [ "$VERBOSITY" -eq 1 ]; then
        echo -n $( jq -R '{ "success": ".", "error": "E", "failure": "F", "timeout": "T" }[.] // "!"' <<<"$STATUS" )
    elif [ "$VERBOSITY" -gt 1 ]; then
        LEN_NUM_TESTS=$( jq -s '.[0] | tostring | length' <<<"$NUM_TESTS" )
        LEN_TEST_NAME=$( jq -R ".[0] | tostring | length | [ 30, . - ( 20 + $LEN_NUM_TESTS ) ] | max" <<<"$COLUMNS" )
        MSG_RESULT=$(
            jq ".[\"$STATUS\"] // \"WHAT?\"" <<-MAP
                {
                    "success": "ok      ",
                    "failure": "FAIL    ",
                    "error":   "ERROR   ",
                    "timeout": "TIME OUT"
                }
            MAP
        TEST_SHORT=$( jq -R ".[0:$LEN_TEST_NAME]" <<<"$TEST" )
        PROGRESS=$( jq "100 * . / $NUM_TESTS" <<<"$NUM" )
        printf "%${LEN_NUM_TESTS}d  $TEST_SHORT  $MSG_RESULT  %.0g" "$NUM" "$PROGRESS"
    fi
)

if [ "$VERBOSITY" -gt 0 ]; then
    if [ -n $( head -c 1 "$FILE_REPORT" ) ]; then
        echo "Raised issues:"
        echo
    else
        echo "All tests passed."
    fi
fi

if [ "$TYPE_LOG" = "human" ]; then
    xargs -I JQCODE jq --raw-output JQCODE "$FILE_REPORT" <<-JQ
        \"*** Test case \\(.test): \\(.type)\" + \
        if has(\"signal\") then \" [\\(.signal.name)]\" else \"\" end + \
        \"***\\n\\n\" + \
        if has(\"output\") then .output + \"\\n\" else \"\" end + \
        \"\\n\"
    JQ
else
    jq --slurp '.' "$FILE_REPORT"
fi
